map = {(1, 2): ('10.0.0.1', '10.0.0.2'), (2, 3): ('10.0.1.1', '10.0.1.2'), (3, 4): ('10.0.2.1', '10.0.2.2'), (4, 5): ('10.0.3.1', '10.0.3.2'), (5, 6): ('10.0.4.1', '10.0.4.2'), (6, 7): ('10.0.5.1', '10.0.5.2'), (7, 8): ('10.0.6.1', '10.0.6.2'), (8, 9): ('10.0.7.1', '10.0.7.2'), (9, 10): ('10.0.8.1', '10.0.8.2'), (10, 11): ('10.0.9.1', '10.0.9.2'), (11, 12): ('10.0.10.1', '10.0.10.2'), (12, 1): ('10.0.11.1', '10.0.11.2'), (13, 14): ('10.0.12.1', '10.0.12.2'), (14, 15): ('10.0.13.1', '10.0.13.2'), (15, 16): ('10.0.14.1', '10.0.14.2'), (16, 17): ('10.0.15.1', '10.0.15.2'), (17, 18): ('10.0.16.1', '10.0.16.2'), (18, 19): ('10.0.17.1', '10.0.17.2'), (19, 20): ('10.0.18.1', '10.0.18.2'), (20, 21): ('10.0.19.1', '10.0.19.2'), (21, 22): ('10.0.20.1', '10.0.20.2'), (22, 23): ('10.0.21.1', '10.0.21.2'), (23, 24): ('10.0.22.1', '10.0.22.2'), (24, 13): ('10.0.23.1', '10.0.23.2'), (25, 26): ('10.0.24.1', '10.0.24.2'), (26, 27): ('10.0.25.1', '10.0.25.2'), (27, 28): ('10.0.26.1', '10.0.26.2'), (28, 29): ('10.0.27.1', '10.0.27.2'), (29, 30): ('10.0.28.1', '10.0.28.2'), (30, 31): ('10.0.29.1', '10.0.29.2'), (31, 32): ('10.0.30.1', '10.0.30.2'), (32, 33): ('10.0.31.1', '10.0.31.2'), (33, 34): ('10.0.32.1', '10.0.32.2'), (34, 35): ('10.0.33.1', '10.0.33.2'), (35, 36): ('10.0.34.1', '10.0.34.2'), (36, 25): ('10.0.35.1', '10.0.35.2'), (37, 38): ('10.0.36.1', '10.0.36.2'), (38, 39): ('10.0.37.1', '10.0.37.2'), (39, 40): ('10.0.38.1', '10.0.38.2'), (40, 41): ('10.0.39.1', '10.0.39.2'), (41, 42): ('10.0.40.1', '10.0.40.2'), (42, 43): ('10.0.41.1', '10.0.41.2'), (43, 44): ('10.0.42.1', '10.0.42.2'), (44, 45): ('10.0.43.1', '10.0.43.2'), (45, 46): ('10.0.44.1', '10.0.44.2'), (46, 47): ('10.0.45.1', '10.0.45.2'), (47, 48): ('10.0.46.1', '10.0.46.2'), (48, 37): ('10.0.47.1', '10.0.47.2'), (49, 50): ('10.0.48.1', '10.0.48.2'), (50, 51): ('10.0.49.1', '10.0.49.2'), (51, 52): ('10.0.50.1', '10.0.50.2'), (52, 53): ('10.0.51.1', '10.0.51.2'), (53, 54): ('10.0.52.1', '10.0.52.2'), (54, 55): ('10.0.53.1', '10.0.53.2'), (55, 56): ('10.0.54.1', '10.0.54.2'), (56, 57): ('10.0.55.1', '10.0.55.2'), (57, 58): ('10.0.56.1', '10.0.56.2'), (58, 59): ('10.0.57.1', '10.0.57.2'), (59, 60): ('10.0.58.1', '10.0.58.2'), (60, 49): ('10.0.59.1', '10.0.59.2'), (61, 62): ('10.0.60.1', '10.0.60.2'), (62, 63): ('10.0.61.1', '10.0.61.2'), (63, 64): ('10.0.62.1', '10.0.62.2'), (64, 65): ('10.0.63.1', '10.0.63.2'), (65, 66): ('10.0.64.1', '10.0.64.2'), (66, 67): ('10.0.65.1', '10.0.65.2'), (67, 68): ('10.0.66.1', '10.0.66.2'), (68, 69): ('10.0.67.1', '10.0.67.2'), (69, 70): ('10.0.68.1', '10.0.68.2'), (70, 71): ('10.0.69.1', '10.0.69.2'), (71, 72): ('10.0.70.1', '10.0.70.2'), (72, 61): ('10.0.71.1', '10.0.71.2'), (1, 13): ('10.0.72.1', '10.0.72.2'), (2, 14): ('10.0.73.1', '10.0.73.2'), (3, 15): ('10.0.74.1', '10.0.74.2'), (4, 16): ('10.0.75.1', '10.0.75.2'), (5, 17): ('10.0.76.1', '10.0.76.2'), (6, 18): ('10.0.77.1', '10.0.77.2'), (7, 19): ('10.0.78.1', '10.0.78.2'), (8, 20): ('10.0.79.1', '10.0.79.2'), (9, 21): ('10.0.80.1', '10.0.80.2'), (10, 22): ('10.0.81.1', '10.0.81.2'), (11, 23): ('10.0.82.1', '10.0.82.2'), (12, 24): ('10.0.83.1', '10.0.83.2'), (13, 25): ('10.0.84.1', '10.0.84.2'), (14, 26): ('10.0.85.1', '10.0.85.2'), (15, 27): ('10.0.86.1', '10.0.86.2'), (16, 28): ('10.0.87.1', '10.0.87.2'), (17, 29): ('10.0.88.1', '10.0.88.2'), (18, 30): ('10.0.89.1', '10.0.89.2'), (19, 31): ('10.0.90.1', '10.0.90.2'), (20, 32): ('10.0.91.1', '10.0.91.2'), (21, 33): ('10.0.92.1', '10.0.92.2'), (22, 34): ('10.0.93.1', '10.0.93.2'), (23, 35): ('10.0.94.1', '10.0.94.2'), (24, 36): ('10.0.95.1', '10.0.95.2'), (25, 37): ('10.0.96.1', '10.0.96.2'), (26, 38): ('10.0.97.1', '10.0.97.2'), (27, 39): ('10.0.98.1', '10.0.98.2'), (28, 40): ('10.0.99.1', '10.0.99.2'), (29, 41): ('10.0.100.1', '10.0.100.2'), (30, 42): ('10.0.101.1', '10.0.101.2'), (31, 43): ('10.0.102.1', '10.0.102.2'), (32, 44): ('10.0.103.1', '10.0.103.2'), (33, 45): ('10.0.104.1', '10.0.104.2'), (34, 46): ('10.0.105.1', '10.0.105.2'), (35, 47): ('10.0.106.1', '10.0.106.2'), (36, 48): ('10.0.107.1', '10.0.107.2'), (37, 49): ('10.0.108.1', '10.0.108.2'), (38, 50): ('10.0.109.1', '10.0.109.2'), (39, 51): ('10.0.110.1', '10.0.110.2'), (40, 52): ('10.0.111.1', '10.0.111.2'), (41, 53): ('10.0.112.1', '10.0.112.2'), (42, 54): ('10.0.113.1', '10.0.113.2'), (43, 55): ('10.0.114.1', '10.0.114.2'), (44, 56): ('10.0.115.1', '10.0.115.2'), (45, 57): ('10.0.116.1', '10.0.116.2'), (46, 58): ('10.0.117.1', '10.0.117.2'), (47, 59): ('10.0.118.1', '10.0.118.2'), (48, 60): ('10.0.119.1', '10.0.119.2'), (49, 61): ('10.0.120.1', '10.0.120.2'), (50, 62): ('10.0.121.1', '10.0.121.2'), (51, 63): ('10.0.122.1', '10.0.122.2'), (52, 64): ('10.0.123.1', '10.0.123.2'), (53, 65): ('10.0.124.1', '10.0.124.2'), (54, 66): ('10.0.125.1', '10.0.125.2'), (55, 67): ('10.0.126.1', '10.0.126.2'), (56, 68): ('10.0.127.1', '10.0.127.2'), (57, 69): ('10.0.128.1', '10.0.128.2'), (58, 70): ('10.0.129.1', '10.0.129.2'), (59, 71): ('10.0.130.1', '10.0.130.2'), (60, 72): ('10.0.131.1', '10.0.131.2')}
def FindNexthopIP(current, nexthop, hashmap):
    key = (current, nexthop)
    nexthopIP = ""
    if key in hashmap.keys():
        nexthopIP = hashmap[key][1]
        return nexthopIP
    key = (nexthop, current)
    if key in hashmap.keys():
        nexthopIP = hashmap[key][0]
    return nexthopIP

def FindPath(list, node1, node2):
    # 找出起点和终点的下标
    start=[(i, list.index(node1)) for i, list in enumerate(list) if node1 in list]
    end=[(i, list.index(node2)) for i, list in enumerate(list) if node2 in list]

    start_x = start[0][1]
    start_y = start[0][0]
    end_x = end[0][1]
    end_y = end[0][0]

    path = []
    nexthop_ip = []
    while start_x != end_x or start_y != end_y:
        current_node = list[start_y][start_x]
        #先横着走
        if start_x < end_x:
            nexthop_y = start_y
            nexthop_x = start_x + 1
            start_x = nexthop_x
        elif start_x > end_x:
            nexthop_y = start_y
            nexthop_x = start_x - 1
            start_x = nexthop_x
        else:
            #横坐标相同，纵着走
            nexthop_x = start_x
            if abs(end_y - start_y) > m / 2 and end_y > start_y:
                nexthop_y = m-1 if start_y == 0 else start_y-1
                # if start_y == 0:
                #     nexthop_y = m - 1
                # else:
                #     nexthop_y = start_y - 1
            elif abs(end_y - start_y) > m / 2 and end_y < start_y:
                nexthop_y = 0 if start_y == m-1 else start_y+1
                # if start_y == m-1:
                #     nexthop_y = 0
                # else:
                #     nexthop_y = start_y + 1
            elif abs(end_y - start_y) <= m / 2 and end_y > start_y:
                nexthop_y = start_y + 1
            else:
                nexthop_y = start_y - 1
            start_y = nexthop_y
        # 下一跳节点编号
        next_node =  list[nexthop_y][nexthop_x]
        path.append(next_node)
        # 下一跳IP
        ip = FindNexthopIP(current_node, next_node, map)
        nexthop_ip.append(ip) 
    print (path)
    print (nexthop_ip)

if __name__ == "__main__":
    topology = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 
                [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], 
                [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], 
                [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], 
                [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], 
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72]]
    topology = list(zip(*topology))
    m = len(topology)
    n = len(topology[0])
    for i in range(m):
        for j in range(n):
            print(topology[i][j], end=" ")
        print("\n")
    FindPath(topology, 45, 61)